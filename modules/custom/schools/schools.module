<?php


function schools_preprocess_page(&$variables) {
  if ((strpos(current_path(), 'schools') === 0)) {
    $variables['theme_hook_suggestions'][] = 'page__test';
    // dpm($variables['theme_hook_suggestions']);
  }
}

/**
 * Implements hook_menu().
 */
function schools_menu() {
/**
 * Sample code from the api example.
 *  items['blog'] = array(
 *    'title' => 'blogs',
 *    'page callback' => 'blog_page',
 *    'access arguments' => array('access content'),
 *    'type' => MENU_SUGGESTED_ITEM,
 *);
 *return items;
 */

 /* Your code here */
 $items = array();
 $items['schools'] = array(
   'title' => 'Schools',
   'page callback' => 'schools_overview_page',
   'access callback' => TRUE
 );
 $items['schools/create'] = array(
  'title' => 'Schools Form',
  'page callback' => 'schools_form_page',
  'access callback' => TRUE
);
$items['schools/%'] = array(
  'page callback' => 'schools_edit_page',
  'page arguments' => array(1),
  'access callback' => TRUE
);


 return $items;

}

/**

 * Implements hook_init().

 */

function schools_init() {
  // Prevent the page from being cached.
  // drupal_page_is_cacheable(FALSE);
  // drupal_flush_all_caches();
}

/**
 * Implements hook_views_api
 */

 // path for two files for drupal to look for
 // 1. MODULE_views.inc
 // 2. MODULE_views_default.inc
function schools_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'schools'),
    'template path' => drupal_get_path('module', 'schools') . '/templates',
  );
}

/**
 * Implements hook_theme().
 */
function schools_theme() {
  return array(
    'school_list' => array(
      'variables' => array(
        'schools' => array(),
      ),
      // Option 1 -- template file: xxx.tpl.php
      'path' => drupal_get_path('module', 'schools') . '/templates',
      'template' => 'school_list',
      // Option 2 -- theme function
      // 'function' => 'schools_school_list',
    ),
    'page__test' => array(

      // base hook: A string declaring the base theme hook if this theme implementation is actually implementing a suggestion for another theme hook.
      'base hook' => 'page',
      'template' => 'templates/page__test',
    ),
  );
}



function schools_overview_page() {

  $records = db_query('SELECT * FROM {schools}')->fetchAllAssoc('school_id', PDO::FETCH_ASSOC);
  
  $school_list = theme('school_list', array('schools' => $records));
  // dpm($school_list);

  dpm(json_encode(array_values($records)));

  $form = drupal_get_form('schools_create_school_form', 'create');

  // Get the view
  $school_view = views_get_view('schools');
  $school_view->set_display('Block');
  $school_view->pre_execute();
  $school_view_markup = $school_view->render('Block');

  return array(
    'page' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'schools-container'
      ),
      'schools' => array(
        '#markup' => $school_list
      ),
      'form' => $form,
    ),
    'view' => array(
      '#markup' => $school_view_markup,
    ),
    'wc' => array(
      '#markup' => '<custom-schools schools=\'' . json_encode(array_values($records)) . '\'></custom-schools>',
    ),
  );

}


function schools_form_page() {
  $form = drupal_get_form('schools_create_school_form');
  // dpm($form);

  return $form;
}

function schools_create_school_form($form, &$form_state, $mode) {

  // dpm($form_state);

  switch ($mode) {
    case 'create':
      $form['title'] = array(
        '#markup' => '<h2>Register a school</h2>',
      );
      $form['name'] = array(
        '#type' => 'textfield', 
        '#title' => 'School Name',   
        '#maxlength' => 255, 
        '#required' => TRUE,
      );
      $form['address'] = array(
        '#type' => 'textfield', 
        '#title' => 'School Address',   
        '#maxlength' => 255, 
        '#required' => TRUE,
      );
      $form['zip'] = array(
        '#type' => 'textfield', 
        '#title' => 'Zip Code',   
        '#maxlength' => 10, 
        '#required' => TRUE,
      );
      $form['submit'] = array(
        '#type' => 'submit', 
        '#value' => 'Submit',
      );
    break;
    case 'edit':
      $school = $form_state['build_info']['args'][1];
      $form['title'] = array(
        '#markup' => "<h2>{$school['name']}</h2>",
      );
      $form['address'] = array(
        '#type' => 'textfield', 
        '#title' => 'Address',   
        '#maxlength' => 255, 
        '#required' => TRUE,
        '#default_value' => $school['address'],
      );
      $form['zip'] = array(
        '#type' => 'textfield', 
        '#title' => 'Zip Code',   
        '#maxlength' => 10, 
        '#required' => TRUE,
        '#default_value' => $school['zip'],
      );
      $form['rating'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('school-rating')
        ),
      );
      $form['rating']['title'] = array(
        '#markup' => '<label>Leave your rating</label>',
        '#attributes' => array(
          'class' => array('form-item-label'),
        ),
      );
      $form['rating']['stars'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('school-rating__stars')
        ),
        'rating' => array(
          '#markup' =>  schools_render_rating(3),
        ),
      );
      $form['actions'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => 'schools-form-actions'
        ),
      );
      $form['actions']['edit'] = array(
        '#type' => 'button', 
        '#value' => 'Edit',
        '#ajax' => array(
          'callback' => 'schools_create_school_form_callback',
          'wrapper' => 'schools-form-actions',
        ),
      );
      $form['actions']['delete'] = array(
        '#type' => 'submit', 
        '#value' => 'Delete',
      );
      $form['actions']['done'] = array(
        '#type' => 'submit', 
        '#value' => 'Done',
        '#attributes' => array(
          'style' => 'display:none;',
        ),
      );
    break;
  } 
  $form['#attributes'] = array(
    'data-mode' => $mode,
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'schools') . '/css/schools_form.css',
  );
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'schools') . '/js/schools_form.js',
    'type' => 'file', // another type is inline
  );
  return $form;
}

function schools_create_school_form_callback($form, &$form_state) {
    return array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'schools-form-actions'
      ),
      'done' => array(
        '#type' => 'submit', 
        '#value' => 'Done',
      ),
    );
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function schools_create_school_form_validate($form, &$form_state) {
  // dpm($form_state);
  $values = &$form_state['values'];

  if (isset($values['name']) && strlen($values['name']) > 255){
    form_set_error('name', 'Length of name field must be less than 255.');
  }

  if (isset($values['address']) && strlen($values['address']) > 255){
    form_set_error('address', 'Length of address field must be less than 255.');
  }

  if (isset($values['zip']) && strlen($values['zip']) != 5){
    form_set_error('zip', 'Zip code must be of length 5.');
  }
}

function schools_create_school_form_submit($form, &$form_state) {
  $mode = $form_state['build_info']['args'][0];
  $values = &$form_state['values'];
  $address = $values['address'];
  $zip = $values['zip'];
  switch ($mode) {
    case 'create':
      $name = $values['name'];
      db_insert('`schools`')
        ->fields(array('name', 'address', 'zip'))
        ->values(array(
            'name' => $name,
            'address' => $address,
            'zip' => $zip,
            ))
        ->execute();  
    break;
    case 'edit': {
      $school = $form_state['build_info']['args'][1];

      $op = $form_state['values']['op'];
      if ($op == 'Delete') {
        db_delete('schools')
        ->condition('school_id', $school['school_id'], '=')
        ->execute();

        drupal_goto('/schools');

      } else { // $op = 'Edit'
        // update the existing record in database
        db_update('schools')
        ->fields(array(
          'address' => $address,
          'zip' => $zip,
        ))
        ->condition('school_id', $school['school_id'], '=')
        ->execute();
      } 
    }
  }

}

function schools_edit_page($school_id) {
  if (!is_numeric($school_id)) {
    drupal_set_message("Invalid school id $school_id", 'error');
    return array();
  }

  // Valid numeric value, but does not guarantee there's a school with that id in the database
  $result = db_select('schools', 's')
  ->fields('s')
  ->condition('school_id', $school_id,'=')
  ->execute()
  ->fetchAssoc();

  if (!$result) {
    drupal_set_message("School with id $school_id does not exist in the database.", 'error');
    return array();
  }

  $form = drupal_get_form('schools_create_school_form', 'edit', $result);


  return array(
    'form' => $form,
  );

}

function schools_render_rating($num) {
  if ($num < 0 || $num > 5) {
    return NULL;
  } 

  $outlined = "<img width='31' height='31' src='/" . drupal_get_path('module', 'schools') . '/images/star_outlined.svg' . "' />";
  $filled = "<img width='31' height='31' src='/" . drupal_get_path('module', 'schools') . '/images/star_filled.svg' . "' />";

  $stars = array_merge(array_fill(0, $num, $filled), array_fill($num, 5 - $num, $outlined));

  return implode("", $stars);
}